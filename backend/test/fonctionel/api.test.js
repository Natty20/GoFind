const request = require("supertest");
const mongoose = require("mongoose");
const app = require("../../app");

let server;

beforeAll(() => {
  server = request(app); // Utiliser supertest directement
  console.log("‚úÖ Serveur Express pr√™t pour les tests");
});

afterAll(async () => {
  await mongoose.connection.close(); // Fermer MongoDB proprement
  console.log("üõë Connexion MongoDB ferm√©e apr√®s les tests");
});

describe("Tests fonctionnels - API des prestations", () => {
  // Test pour r√©cup√©rer toutes les prestations
  it("devrait retourner toutes les prestations", async () => {
    const response = await request(app).get("/api/prestations"); // Effectuer une requ√™te GET sur /api/prestations
    expect(response.status).toBe(200); // V√©rifier que la r√©ponse est OK (status 200)
    expect(response.body).toBeInstanceOf(Array); // V√©rifier que la r√©ponse est un tableau
    expect(response.body.length).toBeGreaterThan(0); // V√©rifier qu'il y a des prestations
  }, 60000);

  // Test pour r√©cup√©rer une prestation par ID
  it("devrait retourner une prestation par ID", async () => {
    const response = await request(app).get("/api/prestations/1"); // Effectuer une requ√™te GET sur /api/prestations/1
    expect(response.status).toBe(200); // V√©rifier que la r√©ponse est OK (status 200)
    expect(response.body).toHaveProperty("id"); // V√©rifier que la r√©ponse contient un ID
    expect(response.body.nom).toBe("√âv√©nementielle"); // V√©rifier que le nom de la prestation est '√âv√©nementielle'
  }, 10000);

  // Test pour cr√©er une prestation
  // it('devrait cr√©er une nouvelle prestation', async () => {
  //     const newPrestation = {
  //         nom: 'Photographie',
  //         description: 'Prestation de photographie pour √©v√©nements.',
  //     };

  //     const response = await request(app)
  //         .post('/api/prestations') // Effectuer une requ√™te POST pour cr√©er une nouvelle prestation
  //         .send(newPrestation); // Envoyer les donn√©es de la prestation

  //     expect(response.status).toBe(201); // V√©rifier que la prestation a bien √©t√© cr√©√©e (status 201)
  //     expect(response.body.nom).toBe(newPrestation.nom); // V√©rifier que le nom de la prestation correspond
  //     expect(response.body.description).toBe(newPrestation.description); // V√©rifier que la description correspond
  // });

  // Test pour v√©rifier la cr√©ation d'une prestation avec des donn√©es manquantes
  // it('devrait retourner une erreur si des donn√©es sont manquantes lors de la cr√©ation', async () => {
  //     const incompletePrestation = {
  //         nom: 'Photographie',
  //         // Description manquante
  //     };

  //     const response = await request(app)
  //         .post('/api/prestations') // Effectuer une requ√™te POST pour cr√©er une prestation
  //         .send(incompletePrestation); // Envoyer les donn√©es manquantes

  //     expect(response.status).toBe(400); // V√©rifier que la r√©ponse est une erreur (status 400)
  //     expect(response.body.message).toBe('Description manquante'); // V√©rifier que le message d'erreur est correct
  // });
});
